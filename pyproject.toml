[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "projectalpha"
version = "0.1.0"
description = "Sophisticated AI orchestration platform with hierarchical reasoning models"
readme = "README.md"
requires-python = ">=3.10"
license = {text = "MIT"}
authors = [
    {name = "ProjectAlpha Team", email = "team@projectalpha.ai"}
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
]
dependencies = [
    "fastapi>=0.100.0",
    "uvicorn[standard]>=0.20.0",
    "pydantic>=2.0.0",
    "sqlalchemy>=2.0.0",
    "alembic>=1.10.0",
    "redis>=4.5.0",
    "celery>=5.3.0",
    "numpy>=1.24.0",
    "pandas>=2.0.0",
    "scikit-learn>=1.3.0",
    "transformers>=4.30.0",
    "torch>=2.0.0",
    "flask>=2.3.0",
    "flask-cors>=4.0.0",
    "requests>=2.31.0",
    "python-multipart>=0.0.6",
    "websockets>=11.0.0",
    "aiofiles>=23.0.0",
    "python-jose[cryptography]>=3.3.0",
    "passlib[bcrypt]>=1.7.4",
    "python-dotenv>=1.0.0",
    "httpx>=0.24.0",
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "hypothesis>=6.80.0",
]

[project.optional-dependencies]
dev = [
    "black>=23.0.0",
    "ruff>=0.1.0",
    "mypy>=1.5.0",
    "pre-commit>=3.4.0",
    "pytest-xdist>=3.3.0",
    "coverage[toml]>=7.3.0",
    "types-requests>=2.31.0",
    "types-redis>=4.6.0",
    "types-setuptools>=68.0.0",
]

[project.urls]
Homepage = "https://github.com/rcmiller01/projectAlpha"
Repository = "https://github.com/rcmiller01/projectAlpha"
Documentation = "https://github.com/rcmiller01/projectAlpha/tree/main/Docs"
"Bug Reports" = "https://github.com/rcmiller01/projectAlpha/issues"

[tool.setuptools.packages.find]
include = ["src*", "backend*"]
exclude = ["tests*", "docs*"]

# Black configuration
[tool.black]
line-length = 100
target-version = ['py310', 'py311', 'py312', 'py313']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
  | __pycache__
  | node_modules
  | webapp/frontend
)/
'''

# Ruff configuration
[tool.ruff]
target-version = "py310"
line-length = 100

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "ARG", # flake8-unused-arguments
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
    "PTH", # flake8-use-pathlib
    "ERA", # eradicate
    "PL",  # pylint
    "RUF", # ruff-specific rules
]
ignore = [
    "E501",   # line too long, handled by black
    "B008",   # do not perform function calls in argument defaults
    "B905",   # `zip()` without an explicit `strict=` parameter
    "C901",   # too complex
    "PLR0913", # too many arguments to function call
    "PLR0915", # too many statements
    "PLR2004", # magic value used in comparison
    "PLW2901", # redefined loop variable
    "UP007",   # Use `X | Y` for type annotations (not compatible with Python 3.9)
]
unfixable = [
    "ERA001", # commented-out code
    "F401",   # unused imports
    "F841",   # unused variables
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*.py" = [
    "S101",    # Use of assert
    "PLR0913", # Too many arguments to function call
    "PLR0915", # Too many statements
    "ARG001",  # Unused function argument
    "ARG002",  # Unused method argument
]
"demos/**/*.py" = [
    "T201",    # print statements
    "PLR0913", # Too many arguments
]

[tool.ruff.lint.isort]
known-first-party = ["src", "backend"]
known-third-party = ["fastapi", "pydantic", "sqlalchemy", "redis", "celery"]
section-order = ["future", "standard-library", "third-party", "first-party", "local-folder"]

[tool.ruff.lint.mccabe]
max-complexity = 10

[tool.ruff.lint.pylint]
max-args = 8
max-branches = 15
max-returns = 8
max-statements = 60

# MyPy configuration
[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
extra_checks = true
show_error_codes = true
show_error_context = true
pretty = true

# Exclude certain directories from mypy checking
exclude = [
    "^webapp/frontend/.*$",
    "^node_modules/.*$",
    "^__pycache__/.*$",
    "^\\.venv/.*$",
    "^build/.*$",
    "^dist/.*$",
]

[[tool.mypy.overrides]]
module = [
    "transformers.*",
    "torch.*",
    "sklearn.*",
    "pandas.*",
    "numpy.*",
    "redis.*",
    "celery.*",
    "ollama.*",
    "anthropic.*",
    "openai.*",
]
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = false

# Coverage configuration
[tool.coverage.run]
source = ["src", "backend"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__init__.py",
    "*/demos/*",
    "*/examples/*",
    "webapp/frontend/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
fail_under = 80
show_missing = true
skip_covered = false

[tool.coverage.html]
directory = "htmlcov"

# Pytest configuration
[tool.pytest.ini_options]
minversion = "6.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=src",
    "--cov=backend",
    "--cov-branch",
    "--cov-report=term-missing",
    "--cov-fail-under=80",
    "--tb=short",
]
testpaths = ["tests"]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "chaos: marks tests as chaos engineering tests",
    "deterministic: marks tests that require deterministic mode",
    "unit: marks tests as unit tests",
    "api: marks tests as API tests",
]

# Bandit security configuration
[tool.bandit]
exclude_dirs = ["tests", "demos", "examples", "webapp/frontend"]
skips = [
    "B101",  # Test for use of assert
    "B601",  # Parameterized shell calls
    "B602",  # Subprocess calls with shell=True
    "B603",  # subprocess.Popen with check
    "B607",  # Starting a process with a partial executable path
]

[tool.bandit.assert_used]
skips = ["*_test.py", "test_*.py"]

# PyDocStyle configuration
[tool.pydocstyle]
inherit = false
ignore = [
    "D100",  # Missing docstring in public module
    "D104",  # Missing docstring in public package
    "D107",  # Missing docstring in __init__
    "D203",  # 1 blank line required before class docstring
    "D213",  # Multi-line docstring summary should start at the second line
    "D215",  # Section underline is over-indented
    "D400",  # First line should end with a period
    "D401",  # First line should be in imperative mood
    "D404",  # First word of the docstring should not be "This"
    "D406",  # Section name should end with a newline
    "D407",  # Missing dashed underline after section
    "D408",  # Section underline should be in the line following the section's name
    "D409",  # Section underline should match the length of its name
    "D413",  # Missing blank line after last section
]
